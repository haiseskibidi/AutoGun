"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä—ã–∂–∫–∏
"""

import time
import threading
import keyboard
from loguru import logger

try:
    import win32api
    import win32con
    import win32gui
    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False
    logger.warning("pywin32 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywin32")


class AutoJump:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä—ã–∂–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞"""
    
    def __init__(self, config_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        if not WIN32_AVAILABLE:
            raise ImportError("pywin32 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        self.config = config_manager
        self.enabled = False
        self.game_hwnd = None  # HWND –æ–∫–Ω–∞ –∏–≥—Ä—ã
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.jump_key = self.config.get('auto_jump.jump_key', 'space')
        self.repeat_count = self.config.get('auto_jump.repeat_count', 2)  # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä—ã–≥–∞—Ç—å
        self.delay_ms = self.config.get('auto_jump.delay_ms', 100)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä—ã–∂–∫–∞–º–∏
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è/–æ—Ç–ø—É—Å–∫–∞–Ω–∏—è)
        self.was_pressed = False
        
        # –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä—ã–∂–∫–æ–≤
        self.is_jumping = False
        
        logger.info("AutoJump –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def enable(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"""
        # –ò—â–µ–º –æ–∫–Ω–æ –∏–≥—Ä—ã
        self.game_hwnd = win32gui.FindWindow(None, "Pixel Gun 3D")
        
        if not self.game_hwnd:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            self.game_hwnd = win32gui.FindWindow(None, "Pixel Gun 3D - Unity")
        
        if not self.game_hwnd:
            logger.error("‚ùå –û–∫–Ω–æ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.jump_key = self.config.get('auto_jump.jump_key', 'space')
        self.repeat_count = self.config.get('auto_jump.repeat_count', 2)
        self.delay_ms = self.config.get('auto_jump.delay_ms', 100)
        
        self.enabled = True
        self.was_pressed = False
        self.is_jumping = False
        logger.info(f"‚úÖ AutoJump –í–ö–õ–Æ–ß–ï–ù (HWND: {self.game_hwnd}, –ø–æ–≤—Ç–æ—Ä–æ–≤: {self.repeat_count}, –∑–∞–¥–µ—Ä–∂–∫–∞: {self.delay_ms}–º—Å)")
        return True
    
    def disable(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"""
        self.enabled = False
        self.was_pressed = False
        self.is_jumping = False
        logger.info("‚è∏ AutoJump –í–´–ö–õ–Æ–ß–ï–ù")
    
    def update(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)"""
        if not self.enabled:
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞ —á–µ—Ä–µ–∑ GetAsyncKeyState
            # VK_SPACE = 0x20
            space_state = win32api.GetAsyncKeyState(0x20)
            is_pressed = (space_state & 0x8000) != 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è (–ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ False –≤ True)
            if is_pressed and not self.was_pressed:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –ø—Ä—ã–∂–∫–∏
                if not self.is_jumping:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–æ –∏–≥—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ
                    if self._is_game_window_active():
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä—ã–∂–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.is_jumping = True
                        jump_thread = threading.Thread(target=self._perform_auto_jumps, daemon=True)
                        jump_thread.start()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            self.was_pressed = is_pressed
            
        except Exception as e:
            logger.error(f"[AUTO_JUMP] –û—à–∏–±–∫–∞ –≤ update: {e}")
    
    def _is_game_window_active(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–∫–Ω–æ –∏–≥—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ (–≤ —Ñ–æ–∫—É—Å–µ)
        
        Returns:
            True –µ—Å–ª–∏ –æ–∫–Ω–æ –∏–≥—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ
        """
        try:
            if not self.game_hwnd or not win32gui.IsWindow(self.game_hwnd):
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ –∑–∞–Ω–æ–≤–æ
                self.game_hwnd = win32gui.FindWindow(None, "Pixel Gun 3D")
                if not self.game_hwnd:
                    return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            active_hwnd = win32gui.GetForegroundWindow()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ = –æ–∫–Ω–æ –∏–≥—Ä—ã
            return active_hwnd == self.game_hwnd
            
        except Exception as e:
            logger.error(f"[AUTO_JUMP] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–Ω–∞: {e}")
            return False
    
    def _perform_auto_jumps(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä—ã–∂–∫–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        try:
            logger.info(f"[AUTO_JUMP] ü¶ò –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–ø—Ä—ã–∂–∫–æ–≤ (x{self.repeat_count})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä—ã–∂–∫–æ–º
            # (—á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            time.sleep(self.delay_ms / 1000.0)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä—ã–∂–∫–∏
            for i in range(self.repeat_count):
                if not self.enabled:
                    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                    break
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞
                keyboard.press(self.jump_key)
                time.sleep(0.05)  # –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ (50–º—Å)
                keyboard.release(self.jump_key)
                
                logger.debug(f"[AUTO_JUMP] –ü—Ä—ã–∂–æ–∫ {i+1}/{self.repeat_count}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä—ã–∂–∫–æ–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < self.repeat_count - 1:
                    time.sleep(self.delay_ms / 1000.0)
            
            logger.info(f"[AUTO_JUMP] ‚úÖ –ê–≤—Ç–æ–ø—Ä—ã–∂–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"[AUTO_JUMP] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        
        finally:
            self.is_jumping = False
    
    def set_repeat_count(self, count: int):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä—ã–∂–∫–æ–≤ (1-10)
        """
        self.repeat_count = max(1, min(10, count))
        logger.info(f"AutoJump: –ø–æ–≤—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ = {self.repeat_count}")
    
    def set_delay(self, delay_ms: int):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä—ã–∂–∫–∞–º–∏
        
        Args:
            delay_ms: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (10-2000)
        """
        self.delay_ms = max(10, min(2000, delay_ms))
        logger.info(f"AutoJump: –∑–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ = {self.delay_ms}–º—Å")
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"""
        if not self.enabled:
            return "–í—ã–∫–ª—é—á–µ–Ω"
        
        return f"–ê–∫—Ç–∏–≤–µ–Ω (x{self.repeat_count}, {self.delay_ms}–º—Å)"

