"""
–î–≤–∏–∂–æ–∫ –º–∞–∫—Ä–æ—Å–æ–≤ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –∏ –∞–≤—Ç–æ—Å–≤–∞–ø
"""

import time
from typing import Dict, List, Optional
from loguru import logger
import keyboard


class MacroEngine:
    """–î–≤–∏–∂–æ–∫ –º–∞–∫—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–∞–ø–∞ –æ—Ä—É–∂–∏–π"""
    
    def __init__(self, config_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = config_manager
        self.enabled = False
        self.current_preset = None
        self.presets = {}
        
        # –ö—ç—à –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
        self.last_ammo = {}
        self.last_weapon_id = 1
        
        # –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
        # –§–æ—Ä–º–∞—Ç: {weapon_id: {'current_rule_idx': 0, 'counter': 0}}
        self.rule_rotation = {}
        
        logger.info("MacroEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_presets(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        self.presets = self.config.get('macros.presets', {})
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.presets)} –ø—Ä–µ—Å–µ—Ç–æ–≤")
    
    def set_active_preset(self, preset_name: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
        
        Args:
            preset_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        """
        if preset_name in self.presets:
            self.current_preset = preset_name
            # –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–µ—Å–µ—Ç–∞
            self.rule_rotation = {}
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç: {preset_name}")
        else:
            logger.warning(f"–ü—Ä–µ—Å–µ—Ç '{preset_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def enable(self):
        """–í–∫–ª—é—á–∏—Ç—å –º–∞–∫—Ä–æ—Å—ã"""
        if not self.current_preset:
            logger.warning("–ù–µ –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç!")
            return False
        
        if not self.presets.get(self.current_preset, {}).get('rules'):
            logger.warning("–í –ø—Ä–µ—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª!")
            return False
        
        self.enabled = True
        logger.info("–ú–∞–∫—Ä–æ—Å—ã –≤–∫–ª—é—á–µ–Ω—ã")
        return True
    
    def disable(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å –º–∞–∫—Ä–æ—Å—ã"""
        self.enabled = False
        logger.info("–ú–∞–∫—Ä–æ—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")
    
    def update(self, ammo_data: Dict[int, tuple], current_weapon: Optional[int] = None):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –∏ —Å–≤–∞–ø
        
        Args:
            ammo_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ç—Ä–æ–Ω–∞—Ö {weapon_id: (clip, reserve)}
            current_weapon: ID —Ç–µ–∫—É—â–µ–≥–æ –æ—Ä—É–∂–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.enabled or not self.current_preset:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ
        if current_weapon is None:
            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø–∞—Ç—Ä–æ–Ω–æ–≤
            current_weapon = self._detect_current_weapon(ammo_data)
        
        if current_weapon is None:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –≤—ã—Å—Ç—Ä–µ–ª
        if self._was_shot_fired(current_weapon, ammo_data):
            logger.debug(f"–í—ã—Å—Ç—Ä–µ–ª –∏–∑ –æ—Ä—É–∂–∏—è {current_weapon}")
            self._handle_shot(current_weapon)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        self.last_ammo = ammo_data.copy()
        self.last_weapon_id = current_weapon
    
    def _detect_current_weapon(self, ammo_data: Dict[int, tuple]) -> Optional[int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø–∞—Ç—Ä–æ–Ω–æ–≤
        
        Args:
            ammo_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ç—Ä–æ–Ω–∞—Ö
            
        Returns:
            ID –æ—Ä—É–∂–∏—è –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É –∫–∞–∫–æ–≥–æ –æ—Ä—É–∂–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –æ–±–æ–π–º–∞
        for weapon_id, (clip, reserve) in ammo_data.items():
            if weapon_id in self.last_ammo:
                old_clip, old_reserve = self.last_ammo[weapon_id]
                if clip < old_clip:  # –£–º–µ–Ω—å—à–∏–ª–∞—Å—å –æ–±–æ–π–º–∞ = —Å—Ç—Ä–µ–ª—è–ª–∏
                    return weapon_id
        
        return self.last_weapon_id
    
    def _was_shot_fired(self, weapon_id: int, ammo_data: Dict[int, tuple]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã–ª –ª–∏ –≤—ã—Å—Ç—Ä–µ–ª
        
        Args:
            weapon_id: ID –æ—Ä—É–∂–∏—è
            ammo_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ç—Ä–æ–Ω–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –±—ã–ª –≤—ã—Å—Ç—Ä–µ–ª
        """
        if weapon_id not in ammo_data or weapon_id not in self.last_ammo:
            return False
        
        current_clip, _ = ammo_data[weapon_id]
        old_clip, _ = self.last_ammo[weapon_id]
        
        # –í—ã—Å—Ç—Ä–µ–ª = —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –æ–±–æ–π–º–∞
        return current_clip < old_clip
    
    def _handle_shot(self, from_weapon: int):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–ø –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–æ
        
        Args:
            from_weapon: ID –æ—Ä—É–∂–∏—è –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–µ–ª—è–ª–∏
        """
        if not self.current_preset or self.current_preset not in self.presets:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        rules = self.presets[self.current_preset].get('rules', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ä—É–∂–∏—è
        matching_rules = [rule for rule in rules if rule['from'] == from_weapon]
        
        if not matching_rules:
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ä—É–∂–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if from_weapon not in self.rule_rotation:
            self.rule_rotation[from_weapon] = {
                'current_rule_idx': 0,
                'counter': 0
            }
        
        rotation = self.rule_rotation[from_weapon]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
        current_rule = matching_rules[rotation['current_rule_idx']]
        to_weapon = current_rule['to']
        check_ammo = current_rule.get('check_ammo', True)
        quick_switch = current_rule.get('quick_switch', False)
        fallback_to = current_rule.get('fallback_to', 0)  # 0 = –Ω–µ—Ç fallback
        fallback_quick_switch = current_rule.get('fallback_quick_switch', False)
        repeat_count = current_rule.get('repeat_count', 1)
        
        # –§–ª–∞–≥: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ fallback
        using_fallback = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ä–æ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if check_ammo and not self._has_ammo(to_weapon):
            # –ï—Å–ª–∏ –µ—Å—Ç—å fallback –æ—Ä—É–∂–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if fallback_to > 0:
                logger.info(f"–£ –æ—Ä—É–∂–∏—è {to_weapon} –Ω–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤ ‚Üí fallback –Ω–∞ {fallback_to}")
                to_weapon = fallback_to
                quick_switch = fallback_quick_switch  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É QS –¥–ª—è fallback!
                using_fallback = True
                
                # –î–ª—è fallback —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ä–æ–Ω—ã
                if not self._has_ammo(to_weapon):
                    logger.debug(f"–°–≤–∞–ø –æ—Ç–º–µ–Ω—ë–Ω: —É fallback –æ—Ä—É–∂–∏—è {to_weapon} —Ç–æ–∂–µ –Ω–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤")
                    rotation['counter'] = 0
                    rotation['current_rule_idx'] = (rotation['current_rule_idx'] + 1) % len(matching_rules)
                    return
            else:
                # –ù–µ—Ç fallback - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ
                logger.debug(f"–°–≤–∞–ø –æ—Ç–º–µ–Ω—ë–Ω: —É –æ—Ä—É–∂–∏—è {to_weapon} –Ω–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤ (fallback –Ω–µ –∑–∞–¥–∞–Ω)")
                rotation['counter'] = 0
                rotation['current_rule_idx'] = (rotation['current_rule_idx'] + 1) % len(matching_rules)
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
        qs_marker = "üî™" if quick_switch else ""
        fallback_marker = " [FALLBACK]" if using_fallback else ""
        logger.info(f"–°–≤–∞–ø: {from_weapon} ‚Üí {to_weapon} {qs_marker}{fallback_marker}(–ø—Ä–∞–≤–∏–ª–æ {rotation['current_rule_idx'] + 1}/{len(matching_rules)}, –≤—ã—Å—Ç—Ä–µ–ª {rotation['counter'] + 1}/{repeat_count})")
        self._switch_weapon(to_weapon, use_quick_switch=quick_switch)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        rotation['counter'] += 1
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
        if rotation['counter'] >= repeat_count:
            rotation['counter'] = 0
            rotation['current_rule_idx'] = (rotation['current_rule_idx'] + 1) % len(matching_rules)
    
    def _has_ammo(self, weapon_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–∞—Ç—Ä–æ–Ω—ã —É –æ—Ä—É–∂–∏—è (–≤ –æ–±–æ–π–º–µ)
        
        Args:
            weapon_id: ID –æ—Ä—É–∂–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã –≤ –æ–±–æ–π–º–µ
        """
        if weapon_id not in self.last_ammo:
            return False
        
        clip, reserve = self.last_ammo[weapon_id]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –æ–±–æ–π–º—É (–Ω–µ –∑–∞–ø–∞—Å!)
        return clip > 0
    
    def _get_weapon_key(self, weapon_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏—à—É –¥–ª—è —Å–ª–æ—Ç–∞ –æ—Ä—É–∂–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        Args:
            weapon_id: ID –æ—Ä—É–∂–∏—è (1-6)
            
        Returns:
            –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ –æ—Ä—É–∂–∏–µ
        """
        return self.config.get(f'keybindings.weapon_slot_{weapon_id}', str(weapon_id))
    
    def _switch_weapon(self, weapon_id: int, use_quick_switch: bool = False):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ä—É–∂–∏–µ (—Å quick switch –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª–µ)
        
        Args:
            weapon_id: ID –æ—Ä—É–∂–∏—è (1-6)
            use_quick_switch: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quick switch –¥–ª—è —ç—Ç–æ–≥–æ —Å–≤–∞–ø–∞
        """
        if weapon_id < 1 or weapon_id > 6:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä—É–∂–∏—è: {weapon_id}")
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ quick switch –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            # (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ default_config.yaml)
            knife_slot = self.config.get('macros.knife_slot')
            delay_ms = self.config.get('macros.quick_switch_delay')
            
            # Quick Switch: –Ω–æ–∂ ‚Üí —Ü–µ–ª–µ–≤–æ–µ –æ—Ä—É–∂–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞)
            if use_quick_switch and weapon_id != knife_slot:
                # –®–∞–≥ 1: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–∂
                knife_key = self._get_weapon_key(knife_slot)
                if knife_key:
                    keyboard.send(knife_key)
                    logger.debug(f"üî™ Quick switch: –Ω–æ–∂ ({knife_slot})")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –Ω–æ–∂–µ (–æ—Ç–º–µ–Ω—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é)
                    time.sleep(delay_ms / 1000.0)
            
            # –®–∞–≥ 2: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –æ—Ä—É–∂–∏–µ
            key = self._get_weapon_key(weapon_id)
            keyboard.send(key)
            logger.debug(f"–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ä—É–∂–∏—è: {e}")
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∞–∫—Ä–æ—Å–æ–≤"""
        if not self.enabled:
            return "–í—ã–∫–ª—é—á–µ–Ω–æ"
        
        if not self.current_preset:
            return "–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç"
        
        rules_count = len(self.presets.get(self.current_preset, {}).get('rules', []))
        return f"–ê–∫—Ç–∏–≤–Ω–æ: {self.current_preset} ({rules_count} –ø—Ä–∞–≤–∏–ª)"
    
    def get_available_presets(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        return list(self.presets.keys())
