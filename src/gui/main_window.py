"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω
"""

from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QSpinBox, QCheckBox, QTextEdit, QFrame, QComboBox)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from loguru import logger


class WeaponRow(QWidget):
    """–°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä—É–∂–∏–∏"""
    
    def __init__(self, weapon_id: int, weapon_name: str, color: str):
        super().__init__()
        self.weapon_id = weapon_id
        self.color = color
        
        layout = QHBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        self.setLayout(layout)
        
        # –¶–≤–µ—Ç–Ω–∞—è –º–µ—Ç–∫–∞
        marker = QLabel("‚óè")
        marker.setStyleSheet(f"color: {color}; font-size: 14px;")
        marker.setFixedWidth(20)
        layout.addWidget(marker)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        name_label = QLabel(weapon_name)
        name_label.setFixedWidth(120)
        name_label.setStyleSheet(f"color: {color};")
        layout.addWidget(name_label)
        
        # –û–±–æ–π–º–∞
        self.clip_label = QLabel("--")
        clip_font = QFont()
        clip_font.setPointSize(14)
        clip_font.setBold(True)
        self.clip_label.setFont(clip_font)
        self.clip_label.setStyleSheet("color: #4CAF50;")
        self.clip_label.setFixedWidth(50)
        self.clip_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        layout.addWidget(self.clip_label)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        sep = QLabel("/")
        sep.setStyleSheet("color: #666;")
        layout.addWidget(sep)
        
        # –ó–∞–ø–∞—Å
        self.reserve_label = QLabel("--")
        reserve_font = QFont()
        reserve_font.setPointSize(14)
        reserve_font.setBold(True)
        self.reserve_label.setFont(reserve_font)
        self.reserve_label.setStyleSheet("color: #2196F3;")
        self.reserve_label.setFixedWidth(50)
        layout.addWidget(self.reserve_label)
        
        layout.addStretch()
    
    def update_ammo(self, clip: int, reserve: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ä–æ–Ω–æ–≤"""
        if self.weapon_id == 3:  # –•–æ–ª–æ–¥–Ω–æ–µ
            self.clip_label.setText("--")
            self.reserve_label.setText("--")
            return
        
        self.clip_label.setText(str(clip))
        self.reserve_label.setText(str(reserve))
        
        # –¶–≤–µ—Ç –æ–±–æ–π–º—ã
        if clip + reserve == 0:
            self.clip_label.setStyleSheet("color: #f44336;")
        elif clip == 0:
            self.clip_label.setStyleSheet("color: #FF9800;")
        else:
            self.clip_label.setStyleSheet("color: #4CAF50;")


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    
    tracking_started = pyqtSignal()
    tracking_stopped = pyqtSignal()
    reconnect_requested = pyqtSignal()
    macros_toggled = pyqtSignal(bool)
    preset_changed = pyqtSignal(str)
    trigger_toggled = pyqtSignal(bool)
    auto_jump_toggled = pyqtSignal(bool)
    auto_jump_settings_changed = pyqtSignal(int, int)  # (repeat_count, delay_ms)
    
    def __init__(self, config_manager):
        super().__init__()
        self.config = config_manager
        self.is_tracking = False
        self.weapon_rows = {}
        
        self._init_ui()
        
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def load_saved_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–≥–æ)"""
        self._load_settings()
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        self.setWindowTitle("AutoGun - PG3D Ammo Tracker")
        self.setGeometry(100, 100, 450, 500)
        
        central = QWidget()
        self.setCentralWidget(central)
        
        layout = QVBoxLayout()
        layout.setSpacing(10)
        central.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("AutoGun")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title.setFont(title_font)
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("color: #4CAF50; padding: 5px;")
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = QFrame()
        status_frame.setStyleSheet("background-color: #252525; border-radius: 3px;")
        status_layout = QHBoxLayout()
        status_layout.setContentsMargins(10, 5, 10, 5)
        status_frame.setLayout(status_layout)
        
        self.status_indicator = QLabel("‚óè")
        self.status_indicator.setStyleSheet("color: #666; font-size: 12px;")
        status_layout.addWidget(self.status_indicator)
        
        self.status_label = QLabel("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        status_layout.addWidget(self.status_label)
        
        status_layout.addStretch()
        
        self.connection_label = QLabel("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        self.connection_label.setStyleSheet("color: #888; font-size: 10px;")
        status_layout.addWidget(self.connection_label)
        
        self.fps_label = QLabel("FPS: 0")
        self.fps_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        status_layout.addWidget(self.fps_label)
        
        layout.addWidget(status_frame)
        
        # –û—Ä—É–∂–∏—è
        weapons_widget = QWidget()
        weapons_layout = QVBoxLayout()
        weapons_layout.setSpacing(2)
        weapons_layout.setContentsMargins(0, 0, 0, 0)
        weapons_widget.setLayout(weapons_layout)
        
        weapons = [
            (1, "–û—Å–Ω–æ–≤–Ω–æ–µ", "#4CAF50"),
            (2, "–ü–∏—Å—Ç–æ–ª–µ—Ç", "#2196F3"),
            (3, "–•–æ–ª–æ–¥–Ω–æ–µ", "#FF9800"),
            (4, "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "#9C27B0"),
            (5, "–°–Ω–∞–π–ø–µ—Ä–∫–∞", "#00BCD4"),
            (6, "–¢—è–∂—ë–ª–æ–µ", "#F44336")
        ]
        
        for wid, name, color in weapons:
            row = WeaponRow(wid, name, color)
            self.weapon_rows[wid] = row
            weapons_layout.addWidget(row)
        
        layout.addWidget(weapons_widget)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = QFrame()
        buttons_frame.setStyleSheet("background-color: #252525; border-radius: 3px;")
        buttons_layout = QHBoxLayout()
        buttons_layout.setContentsMargins(10, 8, 10, 8)
        buttons_frame.setLayout(buttons_layout)
        
        self.start_button = QPushButton("‚ñ∂ –ù–∞—á–∞—Ç—å")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 15px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #45a049; }
        """)
        self.start_button.clicked.connect(self._on_start)
        buttons_layout.addWidget(self.start_button)
        
        self.stop_button = QPushButton("‚è∏ –°—Ç–æ–ø")
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                padding: 8px 15px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #da190b; }
        """)
        self.stop_button.setEnabled(False)
        self.stop_button.clicked.connect(self._on_stop)
        buttons_layout.addWidget(self.stop_button)
        
        self.reconnect_button = QPushButton("üîå")
        self.reconnect_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                padding: 8px 12px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #0b7dda; }
        """)
        self.reconnect_button.clicked.connect(self._on_reconnect)
        buttons_layout.addWidget(self.reconnect_button)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Ä–æ—Å–æ–≤
        self.macros_button = QPushButton("‚öôÔ∏è")
        self.macros_button.setToolTip("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Ä–æ—Å–æ–≤")
        self.macros_button.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                padding: 8px 12px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #7B1FA2; }
        """)
        self.macros_button.clicked.connect(self._on_macros_settings)
        buttons_layout.addWidget(self.macros_button)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏—à
        self.keybindings_button = QPushButton("‚å®Ô∏è")
        self.keybindings_button.setToolTip("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏—à –æ—Ä—É–∂–∏—è")
        self.keybindings_button.setStyleSheet("""
            QPushButton {
                background-color: #00BCD4;
                color: white;
                padding: 8px 12px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #0097A7; }
        """)
        self.keybindings_button.clicked.connect(self._on_keybindings_settings)
        buttons_layout.addWidget(self.keybindings_button)
        
        buttons_layout.addStretch()
        
        buttons_layout.addWidget(QLabel("FPS:"))
        self.fps_spinbox = QSpinBox()
        self.fps_spinbox.setRange(10, 120)
        # –ë–µ—Ä—ë–º –∏–∑ gui.last_update_rate –∏–ª–∏ memory_reading.update_rate
        default_fps = self.config.get('gui.last_update_rate') or self.config.get('memory_reading.update_rate', 120)
        self.fps_spinbox.setValue(default_fps)
        self.fps_spinbox.setFixedWidth(60)
        self.fps_spinbox.setStyleSheet("padding: 3px; background-color: #2a2a2a; border: 1px solid #444; border-radius: 2px;")
        self.fps_spinbox.valueChanged.connect(lambda: self._save_settings())
        buttons_layout.addWidget(self.fps_spinbox)
        
        self.debug_checkbox = QCheckBox("Debug")
        self.debug_checkbox.setChecked(self.config.get('gui.show_debug_info', False))
        buttons_layout.addWidget(self.debug_checkbox)
        
        layout.addWidget(buttons_frame)
        
        # –ü–∞–Ω–µ–ª—å –º–∞–∫—Ä–æ—Å–æ–≤
        macros_frame = QFrame()
        macros_frame.setStyleSheet("background-color: #252525; border-radius: 3px;")
        macros_layout = QHBoxLayout()
        macros_layout.setContentsMargins(10, 5, 10, 5)
        macros_frame.setLayout(macros_layout)
        
        macros_layout.addWidget(QLabel("–ú–∞–∫—Ä–æ—Å—ã:"))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª/–≤—ã–∫–ª
        self.macros_enabled_checkbox = QCheckBox("–í–∫–ª")
        default_macros_enabled = self.config.get('macros.enabled', True)
        self.macros_enabled_checkbox.setChecked(default_macros_enabled)
        self.macros_enabled_checkbox.stateChanged.connect(self._on_macros_toggled)
        macros_layout.addWidget(self.macros_enabled_checkbox)
        
        # –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
        macros_layout.addWidget(QLabel("–ü—Ä–µ—Å–µ—Ç:"))
        self.preset_combo = QComboBox()
        self.preset_combo.setStyleSheet("padding: 3px; background-color: #2a2a2a; border: 1px solid #444; border-radius: 2px;")
        self.preset_combo.currentTextChanged.connect(self._on_preset_changed)
        macros_layout.addWidget(self.preset_combo)
        
        # –°—Ç–∞—Ç—É—Å –º–∞–∫—Ä–æ—Å–æ–≤
        self.macros_status_label = QLabel("–í—ã–∫–ª—é—á–µ–Ω–æ")
        self.macros_status_label.setStyleSheet("color: #888; font-size: 10px;")
        macros_layout.addWidget(self.macros_status_label)
        
        macros_layout.addStretch()
        
        layout.addWidget(macros_frame)
        
        # –ü–∞–Ω–µ–ª—å —Ç—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç–∞
        trigger_frame = QFrame()
        trigger_frame.setStyleSheet("background-color: #252525; border-radius: 3px;")
        trigger_layout = QHBoxLayout()
        trigger_layout.setContentsMargins(10, 5, 10, 5)
        trigger_frame.setLayout(trigger_layout)
        
        trigger_layout.addWidget(QLabel("–¢—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç:"))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª/–≤—ã–∫–ª
        self.trigger_enabled_checkbox = QCheckBox("–í–∫–ª")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        default_trigger_enabled = self.config.get('trigger.enabled', False)
        self.trigger_enabled_checkbox.setChecked(default_trigger_enabled)
        self.trigger_enabled_checkbox.stateChanged.connect(self._on_trigger_toggled)
        trigger_layout.addWidget(self.trigger_enabled_checkbox)
        
        # –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞
        self.trigger_status_label = QLabel("–í—ã–∫–ª—é—á–µ–Ω–æ")
        self.trigger_status_label.setStyleSheet("color: #888; font-size: 10px;")
        trigger_layout.addWidget(self.trigger_status_label)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_label = QLabel("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ")
        warning_label.setStyleSheet("color: #FF9800; font-size: 9px;")
        trigger_layout.addWidget(warning_label)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞:"))
        self.trigger_delay_spinbox = QSpinBox()
        self.trigger_delay_spinbox.setRange(10, 300)
        self.trigger_delay_spinbox.setValue(100)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.trigger_delay_spinbox.setSuffix(" –º—Å")
        self.trigger_delay_spinbox.setFixedWidth(80)
        self.trigger_delay_spinbox.setStyleSheet("padding: 3px; background-color: #2a2a2a; border: 1px solid #444; border-radius: 2px;")
        self.trigger_delay_spinbox.setToolTip("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏")
        trigger_layout.addWidget(self.trigger_delay_spinbox)
        
        trigger_layout.addStretch()
        
        layout.addWidget(trigger_frame)
        
        # –ü–∞–Ω–µ–ª—å Auto Jump (BunnyHop)
        auto_jump_frame = QFrame()
        auto_jump_frame.setStyleSheet("background-color: #252525; border-radius: 3px;")
        auto_jump_layout = QHBoxLayout()
        auto_jump_layout.setContentsMargins(10, 5, 10, 5)
        auto_jump_frame.setLayout(auto_jump_layout)
        
        auto_jump_layout.addWidget(QLabel("Auto Jump:"))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª/–≤—ã–∫–ª
        self.auto_jump_enabled_checkbox = QCheckBox("–í–∫–ª")
        default_auto_jump_enabled = self.config.get('auto_jump.enabled', False)
        self.auto_jump_enabled_checkbox.setChecked(default_auto_jump_enabled)
        self.auto_jump_enabled_checkbox.stateChanged.connect(self._on_auto_jump_toggled)
        auto_jump_layout.addWidget(self.auto_jump_enabled_checkbox)
        
        # –°—Ç–∞—Ç—É—Å
        self.auto_jump_status_label = QLabel("–í—ã–∫–ª—é—á–µ–Ω–æ")
        self.auto_jump_status_label.setStyleSheet("color: #888; font-size: 10px;")
        auto_jump_layout.addWidget(self.auto_jump_status_label)
        
        # –ò–∫–æ–Ω–∫–∞
        jump_icon = QLabel("ü¶ò")
        jump_icon.setStyleSheet("font-size: 14px;")
        auto_jump_layout.addWidget(jump_icon)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        auto_jump_layout.addWidget(QLabel("–ü–æ–≤—Ç–æ—Ä–æ–≤:"))
        self.auto_jump_repeat_spinbox = QSpinBox()
        self.auto_jump_repeat_spinbox.setRange(1, 10)
        self.auto_jump_repeat_spinbox.setValue(self.config.get('auto_jump.repeat_count', 2))
        self.auto_jump_repeat_spinbox.setFixedWidth(50)
        self.auto_jump_repeat_spinbox.setStyleSheet("padding: 3px; background-color: #2a2a2a; border: 1px solid #444; border-radius: 2px;")
        self.auto_jump_repeat_spinbox.setToolTip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä—ã–∂–∫–æ–≤")
        self.auto_jump_repeat_spinbox.valueChanged.connect(self._on_auto_jump_settings_changed)
        auto_jump_layout.addWidget(self.auto_jump_repeat_spinbox)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞
        auto_jump_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞:"))
        self.auto_jump_delay_spinbox = QSpinBox()
        self.auto_jump_delay_spinbox.setRange(10, 2000)
        self.auto_jump_delay_spinbox.setValue(self.config.get('auto_jump.delay_ms', 100))
        self.auto_jump_delay_spinbox.setSuffix(" –º—Å")
        self.auto_jump_delay_spinbox.setFixedWidth(90)
        self.auto_jump_delay_spinbox.setStyleSheet("padding: 3px; background-color: #2a2a2a; border: 1px solid #444; border-radius: 2px;")
        self.auto_jump_delay_spinbox.setToolTip("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä—ã–∂–∫–∞–º–∏")
        self.auto_jump_delay_spinbox.valueChanged.connect(self._on_auto_jump_settings_changed)
        auto_jump_layout.addWidget(self.auto_jump_delay_spinbox)
        
        auto_jump_layout.addStretch()
        
        layout.addWidget(auto_jump_frame)
        
        # –õ–æ–≥
        log_label = QLabel("–õ–æ–≥–∏:")
        log_label.setStyleSheet("font-size: 9px; color: #666;")
        layout.addWidget(log_label)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMinimumHeight(60)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #1a1a1a;
                border: 1px solid #333;
                border-radius: 2px;
                padding: 3px;
                font-family: 'Consolas', monospace;
                font-size: 8px;
                color: #888;
            }
        """)
        layout.addWidget(self.log_text, 1)  # stretch factor = 1 (–±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è)
        
        # –¢–µ–º–∞
        self.setStyleSheet("""
                QMainWindow, QWidget {
                    background-color: #1e1e1e;
                    color: #ffffff;
                }
        """)
    
    def _on_start(self):
        self.is_tracking = True
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.status_indicator.setStyleSheet("color: #4CAF50; font-size: 12px;")
        self.status_label.setText("–†–∞–±–æ—Ç–∞–µ—Ç")
        self.tracking_started.emit()
        self.add_log("‚úÖ –ù–∞—á–∞—Ç–æ")
        self._save_settings()
    
    def _on_stop(self):
        self.is_tracking = False
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.status_indicator.setStyleSheet("color: #666; font-size: 12px;")
        self.status_label.setText("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.tracking_stopped.emit()
        self.add_log("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def _on_reconnect(self):
        self.reconnect_requested.emit()
        self.add_log("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    
    def _on_macros_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Ä–æ—Å–æ–≤"""
        from src.gui.macro_settings_window import MacroSettingsWindow
        dialog = MacroSettingsWindow(self, self.config)
        dialog.exec()
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.reload_presets()
    
    def _on_keybindings_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏—à –æ—Ä—É–∂–∏—è"""
        from src.gui.keybindings_window import KeybindingsWindow
        dialog = KeybindingsWindow(self, self.config)
        dialog.exec()
    
    def _on_macros_toggled(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞–∫—Ä–æ—Å–æ–≤"""
        enabled = (state == 2)  # Qt.CheckState.Checked
        self.macros_toggled.emit(enabled)
        
        if enabled:
            self.macros_status_label.setText("–í–∫–ª—é—á–µ–Ω–æ")
            self.macros_status_label.setStyleSheet("color: #4CAF50; font-size: 10px;")
            self.add_log("‚úÖ –ú–∞–∫—Ä–æ—Å—ã –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            self.macros_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.macros_status_label.setStyleSheet("color: #888; font-size: 10px;")
            self.add_log("‚è∏ –ú–∞–∫—Ä–æ—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")
        
        self._save_settings()
    
    def _on_preset_changed(self, preset_name):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        if preset_name:
            self.preset_changed.emit(preset_name)
            self.add_log(f"–ü—Ä–µ—Å–µ—Ç: {preset_name}")
            self._save_settings()
    
    def _on_trigger_toggled(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç–∞"""
        enabled = (state == 2)  # Qt.CheckState.Checked
        self.trigger_toggled.emit(enabled)
        
        if enabled:
            self.trigger_status_label.setText("–ê–ö–¢–ò–í–ï–ù")
            self.trigger_status_label.setStyleSheet("color: #f44336; font-size: 10px; font-weight: bold;")
            self.add_log("üéØ –¢—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç –≤–∫–ª—é—á–µ–Ω")
        else:
            self.trigger_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.trigger_status_label.setStyleSheet("color: #888; font-size: 10px;")
            self.add_log("‚è∏ –¢—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
        
        self._save_settings()
    
    def _on_auto_jump_toggled(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ Auto Jump"""
        enabled = (state == 2)  # Qt.CheckState.Checked
        self.auto_jump_toggled.emit(enabled)
        
        if enabled:
            self.auto_jump_status_label.setText("–ê–ö–¢–ò–í–ï–ù")
            self.auto_jump_status_label.setStyleSheet("color: #4CAF50; font-size: 10px; font-weight: bold;")
            self.add_log("ü¶ò Auto Jump –≤–∫–ª—é—á–µ–Ω")
        else:
            self.auto_jump_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.auto_jump_status_label.setStyleSheet("color: #888; font-size: 10px;")
            self.add_log("‚è∏ Auto Jump –≤—ã–∫–ª—é—á–µ–Ω")
        
        self._save_settings()
    
    def _on_auto_jump_settings_changed(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Auto Jump"""
        repeat_count = self.auto_jump_repeat_spinbox.value()
        delay_ms = self.auto_jump_delay_spinbox.value()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
        self.config.set('auto_jump.repeat_count', repeat_count)
        self.config.set('auto_jump.delay_ms', delay_ms)
        self._save_settings()
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.auto_jump_settings_changed.emit(repeat_count, delay_ms)
    
    def reload_presets(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        current = self.preset_combo.currentText()
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è _on_preset_changed –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
        self.preset_combo.blockSignals(True)
        self.preset_combo.clear()
        
        presets = self.config.get('macros.presets', {})
        for preset_name in presets.keys():
            self.preset_combo.addItem(preset_name)
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π
        preset_to_select = current
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫) - –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π
        if not preset_to_select:
            preset_to_select = self.config.get('gui.last_preset')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∞—à–ª–∏
        if preset_to_select:
            index = self.preset_combo.findText(preset_to_select)
            if index >= 0:
                self.preset_combo.setCurrentIndex(index)
                logger.info(f"–ü—Ä–µ—Å–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {preset_to_select}")
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.preset_combo.blockSignals(False)
        
        # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª 
        # —á—Ç–æ–±—ã macro_engine –∑–Ω–∞–ª –∫–∞–∫–æ–π –ø—Ä–µ—Å–µ—Ç –≤—ã–±—Ä–∞–Ω
        current_preset = self.preset_combo.currentText()
        if current_preset:
            self.preset_changed.emit(current_preset)
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ user_settings"""
        fps = self.fps_spinbox.value()
        macros = self.macros_enabled_checkbox.isChecked()
        trigger = self.trigger_enabled_checkbox.isChecked()
        auto_jump = self.auto_jump_enabled_checkbox.isChecked()
        preset = self.preset_combo.currentText()
        
        self.config.set('gui.last_update_rate', fps)
        self.config.set('gui.macros_enabled', macros)
        self.config.set('gui.trigger_enabled', trigger)
        self.config.set('gui.auto_jump_enabled', auto_jump)
        self.config.set('gui.last_preset', preset)
        self.config.save_user_config()
        
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: FPS={fps}, –ú–∞–∫—Ä–æ—Å—ã={macros}, –¢—Ä–∏–≥–≥–µ—Ä={trigger}, AutoJump={auto_jump}, –ü—Ä–µ—Å–µ—Ç={preset}")
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # FPS
        saved_fps = self.config.get('gui.last_update_rate')
        if saved_fps:
            self.fps_spinbox.blockSignals(True)  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.fps_spinbox.setValue(saved_fps)
            self.fps_spinbox.blockSignals(False)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω FPS: {saved_fps}")
        
        # –ü—Ä–µ—Å–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ reload_presets(), –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        
        macros_enabled = self.config.get('gui.macros_enabled')
        if macros_enabled is None:
            macros_enabled = self.config.get('macros.enabled', True)
        
        self.macros_enabled_checkbox.blockSignals(True)  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.macros_enabled_checkbox.setChecked(macros_enabled)
        self.macros_enabled_checkbox.blockSignals(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if macros_enabled:
            self.macros_status_label.setText("–í–∫–ª—é—á–µ–Ω–æ")
            self.macros_status_label.setStyleSheet("color: #4CAF50; font-size: 10px;")
        else:
            self.macros_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.macros_status_label.setStyleSheet("color: #888; font-size: 10px;")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–∫—Ä–æ—Å–æ–≤: {macros_enabled}")
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–∫—Ä–æ—Å–æ–≤
        self.macros_toggled.emit(macros_enabled)
        
        # –¢—Ä–∏–≥–≥–µ—Ä-–±–æ—Ç (–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
        trigger_enabled = self.config.get('gui.trigger_enabled')
        if trigger_enabled is None:
            trigger_enabled = self.config.get('trigger.enabled', False)
        
        self.trigger_enabled_checkbox.blockSignals(True)
        self.trigger_enabled_checkbox.setChecked(trigger_enabled)
        self.trigger_enabled_checkbox.blockSignals(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if trigger_enabled:
            self.trigger_status_label.setText("–ê–ö–¢–ò–í–ï–ù")
            self.trigger_status_label.setStyleSheet("color: #f44336; font-size: 10px; font-weight: bold;")
        else:
            self.trigger_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.trigger_status_label.setStyleSheet("color: #888; font-size: 10px;")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {trigger_enabled}")
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        self.trigger_toggled.emit(trigger_enabled)
        
        # Auto Jump
        auto_jump_enabled = self.config.get('gui.auto_jump_enabled')
        if auto_jump_enabled is None:
            auto_jump_enabled = self.config.get('auto_jump.enabled', False)
        
        self.auto_jump_enabled_checkbox.blockSignals(True)
        self.auto_jump_enabled_checkbox.setChecked(auto_jump_enabled)
        self.auto_jump_enabled_checkbox.blockSignals(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if auto_jump_enabled:
            self.auto_jump_status_label.setText("–ê–ö–¢–ò–í–ï–ù")
            self.auto_jump_status_label.setStyleSheet("color: #4CAF50; font-size: 10px; font-weight: bold;")
        else:
            self.auto_jump_status_label.setText("–í—ã–∫–ª—é—á–µ–Ω–æ")
            self.auto_jump_status_label.setStyleSheet("color: #888; font-size: 10px;")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Auto Jump: {auto_jump_enabled}")
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Auto Jump
        self.auto_jump_toggled.emit(auto_jump_enabled)
    
    def update_weapon_ammo(self, weapon_id: int, clip: int, reserve: int):
        if weapon_id in self.weapon_rows:
            self.weapon_rows[weapon_id].update_ammo(clip, reserve)
    
    def update_all_weapons(self, ammo_data: dict):
        for wid in range(1, 7):
            if wid in ammo_data:
                clip, reserve = ammo_data[wid]
                self.update_weapon_ammo(wid, clip, reserve)
    
    def update_fps(self, fps: float):
        self.fps_label.setText(f"FPS: {fps:.1f}")
        
        if fps >= 50:
            self.fps_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        elif fps >= 30:
            self.fps_label.setStyleSheet("color: #FF9800; font-weight: bold;")
        else:
            self.fps_label.setStyleSheet("color: #f44336; font-weight: bold;")
    
    def add_log(self, message: str):
        self.log_text.append(message)
        scrollbar = self.log_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def get_update_rate(self) -> int:
        return self.fps_spinbox.value()
    
    def update_connection_status(self, status: str, color: str = "green"):
        color_map = {
            "green": "#4CAF50",
            "orange": "#FF9800",
            "red": "#f44336"
        }
        self.connection_label.setText(status)
        self.connection_label.setStyleSheet(f"color: {color_map.get(color, '#888')}; font-size: 10px;")
    
    def is_debug_mode(self) -> bool:
        return self.debug_checkbox.isChecked()
    
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    def update_ammo_count(self, current: int, maximum: int):
        pass
    
    def get_current_category(self):
        return 1
